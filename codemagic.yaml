# Codemagic CI/CD workflow for Ionic Capacitor iOS app with Bun

workflows:
  ionic-capacitor-ios-optimized:
    name: Capacitor iOS Build with Bun (Optimized)
    max_build_duration: 90 # Increased duration slightly for safety
    instance_type: mac_mini_m1 # Recommended for faster iOS builds
    environment:
      # Choose the Xcode version your project requires. 'latest' is usually fine.
      xcode: latest 
      node: latest # Using 'latest' Node.js

    scripts:
      - name: Install Bun
        script: |
          echo "Installing Bun..."
          curl -fsSL https://bun.sh/install | bash
          
          # Add Bun's bin directory to PATH for the current shell session
          # This is crucial for subsequent 'bun' commands to work
          export PATH="$HOME/.bun/bin:$PATH"
          
          echo "Bun installed. Version:"
          bun --version # Verify Bun installation

      - name: Install JavaScript Dependencies with Bun
        script: |
          echo "Ensuring Bun is in PATH for this step..."
          export PATH="$HOME/.bun/bin:$PATH" # Re-export PATH for safety across script blocks
          echo "Installing optimized JavaScript dependencies using Bun..."
          # Using --silent to reduce log verbosity, or remove it for full logs
          bun install --silent 

      - name: Build Web Assets with Bun
        script: |
          echo "Ensuring Bun is in PATH for this step..."
          export PATH="$HOME/.bun/bin:$PATH" # Re-export PATH for safety
          echo "Building web assets using Bun..."
          # Replace 'build' with your actual script name from package.json if it's different
          bun run build

          # IMPORTANT: If your 'bun run build' command outputs to a directory other than 'www'
          # (e.g., 'dist', 'out'), you MUST copy those assets to 'www/' for Capacitor.
          # Example for 'dist' output:
          # echo "Copying built assets from 'dist' to 'www'..."
          # cp -R dist/* www/
          # If your build script directly outputs to 'www', you don't need this.

      - name: Generate iOS Project & Sync Assets
        script: |
          echo "Generating/Updating iOS native project with Capacitor..."
          # 'npx cap add ios' adds the iOS platform if not already added.
          # 'npx cap sync ios' copies web assets and updates native project.
          npx cap add ios
          npx cap sync ios 

      - name: Install CocoaPods for iOS Native Project
        script: |
          echo "Navigating to iOS project directory..."
          cd ios/App
          echo "Installing CocoaPods dependencies..."
          # --repo-update ensures pods are updated to the latest specs
          pod install --repo-update 
          echo "Finished CocoaPods installation."
          cd ../.. # Go back to the project root

      - name: Archive iOS App
        script: |
          echo "Navigating to iOS project directory for archiving..."
          cd ios/App
          echo "Archiving iOS app for distribution..."
          
          # The scheme should match your main app target in Xcode. Default is 'App'.
          # Configuration 'Release' is standard for distribution builds.
          # -sdk iphoneos specifies building for a physical device.
          # -archivePath specifies where the .xcarchive will be stored.
          xcodebuild archive \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphoneos \
            -archivePath $CM_BUILD_DIR/build/App.xcarchive \
            CODE_SIGN_IDENTITY="$CM_CERTIFICATE_CODE_SIGN_IDENTITY" \
            PROVISIONING_PROFILE_SPECIFIER="$CM_PROVISIONING_PROFILE_SPECIFIER" \
            # --allow-provisioning-updates is often useful to let Xcode manage profiles
            OTHER_CODE_SIGN_FLAGS="--allow-provisioning-updates" \
            -allowProvisioningUpdates | xcpretty # xcpretty makes output more readable

          echo "iOS App archiving completed."
          cd ../.. # Go back to the project root

      - name: Export IPA
        script: |
          echo "Preparing to export IPA from archive..."
          # This variable holds the path to the ExportOptions.plist generated by Codemagic.
          # This relies on you configuring iOS Code Signing in Codemagic UI.
          if [ -z "$CM_EXPORT_OPTIONS_PATH" ]; then
            echo "Error: CM_EXPORT_OPTIONS_PATH is not set. Please ensure iOS Code Signing is configured in Codemagic UI."
            exit 1
          fi

          IPA_EXPORT_DIR="$CM_BUILD_DIR/ipa_output"
          mkdir -p "$IPA_EXPORT_DIR"
          
          echo "Exporting IPA to: $IPA_EXPORT_DIR"
          xcodebuild -exportArchive \
            -archivePath $CM_BUILD_DIR/build/App.xcarchive \
            -exportPath "$IPA_EXPORT_DIR" \
            -exportOptionsPlist "$CM_EXPORT_OPTIONS_PATH" \
            -allowProvisioningUpdates | xcpretty

          echo "âœ… iOS IPA export completed!"

    # Defines what files/folders from the build machine should be saved as build artifacts
    artifacts:
      - $CM_BUILD_DIR/ipa_output/*.ipa # This will save your final IPA file
      # Optional: To save the .xcarchive for debugging (it can be very large)
      # - $CM_BUILD_DIR/build/*.xcarchive
